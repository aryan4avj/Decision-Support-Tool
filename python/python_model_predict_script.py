# -*- coding: utf-8 -*-
"""Python model.predict script.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rfppcXmAXyaUZMFUxh9HHn215FVsI2YM
"""

import pandas as pd
import pickle
from sklearn.preprocessing import LabelEncoder, OneHotEncoder
from sklearn.compose import ColumnTransformer
import sys


def load_model(model_path):
    with open(model_path, 'rb') as f:
        model = pickle.load(f)
    return model

def predict(model, input_df):
    # Apply the same preprocessing steps as in the training phase

    input_df = pd.DataFrame([input_data], columns=['Sex', 'Age', 'Height (m)', 'BMI start treat (kg/m2)', 'Diag', 'Grade',
       'HPV status', 'Induction Chemotherapy', 'Chemotherapy Regimen',
       'Platinum-based chemotherapy', 'Received Concurrent Chemoradiotherapy?',
       'CCRT Chemotherapy Regimen', 'Surgery Summary', 'Smoking History',
       'Current Smoker'])

    le = LabelEncoder()
    
    preprocessor = ColumnTransformer(transformers=[
        ('cat', OneHotEncoder(handle_unknown='ignore'), ['Sex', 'Age', 'Height (m)', 'BMI start treat (kg/m2)', 'Diag', 'Grade',
       'HPV status', 'Induction Chemotherapy', 'Chemotherapy Regimen',
       'Platinum-based chemotherapy', 'Received Concurrent Chemoradiotherapy?',
       'CCRT Chemotherapy Regimen', 'Surgery Summary', 'Smoking History',
       'Current Smoker'])    ],
    sparse_threshold=0)

    # Preprocess the input data
    X = preprocessor.fit_transform(input_df)

    # Make predictions
    y_pred_encoded = model.predict(X)

    # Decode the integer predictions back to the original class labels
    y_pred = le.inverse_transform(y_pred_encoded)

    return y_pred

# if __name__ == '__main__':
#     model_path = sys.argv[1]
#     model = load_model(model_path)
# 
#     # Load input data from list passed as an argument
#     input_data = sys.argv[2:]
#     
#     prediction = predict(model, input_data)
#     print(prediction)
# 
